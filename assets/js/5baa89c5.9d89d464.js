"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[471],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:3},i="Relay Node",l={unversionedId:"stake-pool/relay-node",id:"stake-pool/relay-node",title:"Relay Node",description:"Raspberry Pi 4 Model B 8GB",source:"@site/docs/stake-pool/relay-node.md",sourceDirName:"stake-pool",slug:"/stake-pool/relay-node",permalink:"/guides/stake-pool/relay-node",draft:!1,editUrl:"https://github.com/orcada-io/guides/edit/master/docs/stake-pool/relay-node.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Hardening",permalink:"/guides/stake-pool/bare-metal-server/server-setup/hardening"},next:{title:"Core Node",permalink:"/guides/stake-pool/core-node"}},s={},p=[{value:"Raspberry Pi 4 Model B 8GB",id:"raspberry-pi-4-model-b-8gb",level:2},{value:"Directory structure",id:"directory-structure",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Download the node config files",id:"download-the-node-config-files",level:3},{value:"Build the Cardano ARM binaries",id:"build-the-cardano-arm-binaries",level:2},{value:"Download the Cardano ARM binaries",id:"download-the-cardano-arm-binaries",level:2},{value:"Glasgow Haskell Compiler",id:"glasgow-haskell-compiler",level:3},{value:"Runtime system options",id:"runtime-system-options",level:3},{value:"Setting the runtime system options",id:"setting-the-runtime-system-options",level:3},{value:"Systemd service configuration",id:"systemd-service-configuration",level:2},{value:"Syncing to the blockchain",id:"syncing-to-the-blockchain",level:2},{value:"Connecting with peers",id:"connecting-with-peers",level:2},{value:"Create a cron job",id:"create-a-cron-job",level:3},{value:"Monitoring",id:"monitoring",level:2},{value:"gLiveView",id:"gliveview",level:3},{value:"Prometheus",id:"prometheus",level:3},{value:"Resources",id:"resources",level:3}],d={toc:p};function c(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"relay-node"},"Relay Node"),(0,o.kt)("h2",{id:"raspberry-pi-4-model-b-8gb"},"Raspberry Pi 4 Model B 8GB"),(0,o.kt)("p",{align:"center"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Raspberry Pi 4 Model B",src:t(7367).Z,width:"571",height:"340"}))),(0,o.kt)("h2",{id:"directory-structure"},"Directory structure"),(0,o.kt)("p",null,"Create the directories for the project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir -p ${HOME}/.local/bin && \\\nmkdir -p ${HOME}/pi-pool/files  && \\\nmkdir -p ${HOME}/pi-pool/logs && \\\nmkdir -p ${HOME}/pi-pool/scripts && \\\nmkdir ${HOME}/git && \\\nmkdir ${HOME}/tmp\n")),(0,o.kt)("p",null,"We can visualise the project structure using the ",(0,o.kt)("strong",{parentName:"p"},"tree")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt install tree\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"tree -da\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 git\n\u251c\u2500\u2500 .local\n\u2502\xa0\xa0 \u251c\u2500\u2500 bin\n\u251c\u2500\u2500 pi-pool\n\u2502\xa0\xa0 \u251c\u2500\u2500 files\n\u2502\xa0\xa0 \u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u2514\u2500\u2500 scripts\n\u2514\u2500\u2500 tmp\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Create a configuration file that will contain all the ",(0,o.kt)("strong",{parentName:"p"},"Cardano Node")," variables and settings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano .adaenv\n")),(0,o.kt)("p",null,"And update it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NODE_CONFIG=mainnet\n")),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Source the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"source ${HOME}/.adaenv\n")),(0,o.kt)("p",null,"We want the ",(0,o.kt)("inlineCode",{parentName:"p"},".bashrc")," file to source the Cardano Node variables and settings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"echo . ~/.adaenv >> ${HOME}/.bashrc\n")),(0,o.kt)("p",null,"Update the ",(0,o.kt)("inlineCode",{parentName:"p"},".adaenv")," file, add ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.local/bin")," to the $PATH and create some bash variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd .local/bin; echo \"export PATH=\\\"$PWD:\\$PATH\\\"\" >> $HOME/.adaenv && \\\necho export NODE_HOME=${HOME}/pi-pool >> ${HOME}/.adaenv && \\\necho export NODE_PORT=5011 >> ${HOME}/.adaenv && \\\necho export NODE_FILES=${HOME}/pi-pool/files >> ${HOME}/.adaenv && \\\necho export TOPOLOGY='${NODE_FILES}'/'${NODE_CONFIG}'-topology.json >> ${HOME}/.adaenv && \\\necho export DB_PATH='${NODE_HOME}'/db >> ${HOME}/.adaenv && \\\necho export CONFIG='${NODE_FILES}'/'${NODE_CONFIG}'-config.json >> ${HOME}/.adaenv && \\\necho export NODE_BUILD_NUM=$(curl https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/index.html | grep -e \"build\" | sed 's/.*build\\/\\([0-9]*\\)\\/download.*/\\1/g') >> ${HOME}/.adaenv && \\\necho export CARDANO_NODE_SOCKET_PATH=\"${HOME}/pi-pool/db/socket\" >> ${HOME}/.adaenv\n")),(0,o.kt)("p",null,"Check the updated ",(0,o.kt)("inlineCode",{parentName:"p"},".adaenv")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat ${HOME}/.adaenv\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'NODE_CONFIG=mainnet\nexport PATH="/home/ada/.local/bin:$PATH"\nexport NODE_HOME=/home/ada/pi-pool\nexport NODE_PORT=5011\nexport NODE_FILES=/home/ada/pi-pool/files\nexport TOPOLOGY=${NODE_FILES}/${NODE_CONFIG}-topology.json\nexport DB_PATH=${NODE_HOME}/db\nexport CONFIG=${NODE_FILES}/${NODE_CONFIG}-config.json\nexport NODE_BUILD_NUM=14528927\nexport CARDANO_NODE_SOCKET_PATH=/home/ada/pi-pool/db/socket\n')),(0,o.kt)("p",null,"Source the updated files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"source ${HOME}/.bashrc; source ${HOME}/.adaenv\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"It is important to remember that if you change a variable or a setting in the ",(0,o.kt)("inlineCode",{parentName:"p"},".adaenv")," configuration file, then you must\nreinitialise the values by sourcing the file. This also applies to changes that you make to any other configuration or\ntopology files. You must also restart the Cardano Node after any changes.")),(0,o.kt)("h3",{id:"download-the-node-config-files"},"Download the node config files"),(0,o.kt)("p",null,"Download the node config files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd $NODE_FILES\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-config.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-byron-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-shelley-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-alonzo-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-topology.json\nwget -N https://raw.githubusercontent.com/input-output-hk/cardano-node/master/cardano-submit-api/config/tx-submit-mainnet-config.yaml\n")),(0,o.kt)("h2",{id:"build-the-cardano-arm-binaries"},"Build the Cardano ARM binaries"),(0,o.kt)("p",null,"See: ",(0,o.kt)("a",{href:"https://developers.cardano.org/docs/get-started/installing-cardano-node/",target:"_blank"},"Cardano Developer Portal")),(0,o.kt)("h2",{id:"download-the-cardano-arm-binaries"},"Download the Cardano ARM binaries"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"cardano-node"),", ",(0,o.kt)("strong",{parentName:"p"},"cardano-cli")," and ",(0,o.kt)("strong",{parentName:"p"},"cardano-submit-api")," ARM binaries are built by an IOHK engineer in his spare time.\nPlease consider delegating to the ",(0,o.kt)("a",{href:"https://developers.cardano.org/docs/get-started/installing-cardano-node/",target:"_blank"},"zw3rk")," pool."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ${HOME}/tmp\nwget -O 1_35_3.zip https://github.com/armada-alliance/cardano-node-binaries/blob/main/static-binaries/1_35_3.zip?raw=true\nunzip *.zip\nmv cardano-node/cardano-* ${HOME}/.local/bin\nrm -r *\ncd ${HOME}\n")),(0,o.kt)("p",null,"Confirm that the binaries are in the $USER's (ada) $PATH:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cardano-node version && \\\ncardano-cli version && \\\nwhich cardano-submit-api\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ cardano-node version\ncardano-node 1.35.3 - linux-aarch64 - ghc-8.10\ngit rev 0000000000000000000000000000000000000000\n\n$ cardano-cli version\ncardano-cli 1.35.3 - linux-aarch64 - ghc-8.10\ngit rev 0000000000000000000000000000000000000000\n\n$ which cardano-submit-api\n/home/ada/.local/bin/cardano-submit-api\n")),(0,o.kt)("h3",{id:"glasgow-haskell-compiler"},"Glasgow Haskell Compiler"),(0,o.kt)("p",null,"The Cardano binaries are implemented in ",(0,o.kt)("a",{href:"https://wiki.haskell.org/Introduction",target:"_blank"},"Haskell"),"\nwhich is a polymorphically statically typed, lazy, purely functional programming language. The Cardano executable\nbinaries are built using Cabal (a system for building and packaging Haskell libraries and programs) and the Glasgow\nHaskell Compiler (GHC)."),(0,o.kt)("p",null,"To make an executable program, GHC compiles the source code and then links it with a non-trivial ",(0,o.kt)("strong",{parentName:"p"}," runtime system"),",\nwhich handles storage management, thread scheduling, profiling, and so on."),(0,o.kt)("p",null,"We can determine the default runtime system (RTS) parameters that the node has been complied with, using the following\ncommand:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cardano-node +RTS --info\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' [("GHC RTS", "YES")\n ,("GHC version", "8.10.7")\n ,("RTS way", "rts_thr")\n ,("Build platform", "x86_64-unknown-linux")\n ,("Build architecture", "x86_64")\n ,("Build OS", "linux")\n ,("Build vendor", "unknown")\n ,("Host platform", "x86_64-unknown-linux")\n ,("Host architecture", "x86_64")\n ,("Host OS", "linux")\n ,("Host vendor", "unknown")\n ,("Target platform", "aarch64-unknown-linux")\n ,("Target architecture", "aarch64")\n ,("Target OS", "linux")\n ,("Target vendor", "unknown")\n ,("Word size", "64")\n ,("Compiler unregisterised", "NO")\n ,("Tables next to code", "YES")\n ,("Flag -with-rtsopts", "-T -I0 -A16m -N2 --disable-delayed-os-memory-return")]\n')),(0,o.kt)("p",null,"So the default RTS parameters are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-T -I0 -A16m -N2 --disable-delayed-os-memory-return\n")),(0,o.kt)("h3",{id:"runtime-system-options"},"Runtime system options"),(0,o.kt)("p",null,"The RTS has a lot of options to control its behaviour. For example, you can change the context-switch interval, the\ndefault size of the heap, and enable heap profiling."),(0,o.kt)("h3",{id:"setting-the-runtime-system-options"},"Setting the runtime system options"),(0,o.kt)("p",null,"You can set the RTS options by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"GHCRTS")," environment variable."),(0,o.kt)("p",null,"Open the ",(0,o.kt)("inlineCode",{parentName:"p"},".bashrc")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano $HOME/.bashrc\n")),(0,o.kt)("p",null,"Add the following line to the bottom of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export GHCRTS='-N4 --disable-delayed-os-memory-return -I0.3 -Iw600 -A16m -F1.5 -H2500M -T -S'\n")),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Source the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"source $HOME/.bashrc\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},'To further reduce memory and cpu usage set "TraceMemPool" to "false" in the ',(0,o.kt)("inlineCode",{parentName:"p"},"${NODE_CONFIG}-config.json")," file:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},'cd $NODE_FILES\nsed -i ${NODE_CONFIG}-config.json \\\n    -e "s/TraceMempool\\": true/TraceMempool\\": false/g"\n'))),(0,o.kt)("h2",{id:"systemd-service-configuration"},"Systemd service configuration"),(0,o.kt)("p",null,"Create the ",(0,o.kt)("strong",{parentName:"p"},"cardano-node")," startup script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano ${HOME}/.local/bin/cardano-service\n")),(0,o.kt)("p",null,"And update it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#!/bin/bash\n. /home/ada/.adaenv\n\ncardano-node run \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${CARDANO_NODE_SOCKET_PATH} \\\n  --port ${NODE_PORT} \\\n  --config ${CONFIG}\n")),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Make the script executable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x ${HOME}/.local/bin/cardano-service\n")),(0,o.kt)("p",null,"Create the ",(0,o.kt)("strong",{parentName:"p"},"cardano-node")," systemd unit file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo nano /etc/systemd/system/cardano-node.service\n")),(0,o.kt)("p",null,"And update it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# The Cardano Node Service (part of systemd)\n# file: /etc/systemd/system/cardano-node.service\n\n[Unit]\nDescription     = Cardano node service\nWants           = network-online.target\nAfter           = network-online.target\n\n[Service]\nUser            = ada\nType            = simple\nWorkingDirectory= /home/ada/pi-pool\nExecStart       = /bin/bash -c "PATH=/home/ada/.local/bin:$PATH exec /home/ada/.local/bin/cardano-service"\nKillSignal=SIGINT\nRestartKillSignal=SIGINT\nTimeoutStopSec=10\nLimitNOFILE=32768\nRestart=always\nRestartSec=10\nEnvironmentFile=-/home/ada/.adaenv\n\n[Install]\nWantedBy= multi-user.target\n')),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Create the ",(0,o.kt)("strong",{parentName:"p"},"cardano-submit-api")," startup script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano ${HOME}/.local/bin/cardano-submit-service\n")),(0,o.kt)("p",null,"And update it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#!/bin/bash\n. /home/ada/.adaenv\n\ncardano-submit-api \\\n  --socket-path ${CARDANO_NODE_SOCKET_PATH} \\\n  --port 8090 \\\n  --config /home/ada/pi-pool/files/tx-submit-mainnet-config.yaml \\\n  --listen-address 0.0.0.0 \\\n  --mainnet\n")),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Make the script executable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x ${HOME}/.local/bin/cardano-submit-service\n")),(0,o.kt)("p",null,"Create the ",(0,o.kt)("strong",{parentName:"p"},"cardano-submit-api")," systemd unit file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo nano /etc/systemd/system/cardano-submit.service\n")),(0,o.kt)("p",null,"And update it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# The Cardano Submit Service (part of systemd)\n# file: /etc/systemd/system/cardano-submit.service\n\n[Unit]\nDescription     = Cardano submit service\nWants           = network-online.target\nAfter           = network-online.target\n\n[Service]\nUser            = ada\nType            = simple\nWorkingDirectory= /home/ada/pi-pool\nExecStart       = /bin/bash -c "PATH=/home/ada/.local/bin:$PATH exec /home/ada/.local/bin/cardano-submit-service"\nKillSignal=SIGINT\nRestartKillSignal=SIGINT\nTimeoutStopSec=10\nLimitNOFILE=32768\nRestart=always\nRestartSec=10\nEnvironmentFile=-/home/ada/.adaenv\n\n[Install]\nWantedBy= multi-user.target\n')),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Reload systemd:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo systemctl daemon-reload\n")),(0,o.kt)("p",null,"Now we can update the ",(0,o.kt)("inlineCode",{parentName:"p"},".adaenv")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano .adaenv\n")),(0,o.kt)("p",null,"Add the following lines to the bottom of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'...\n\ncardano-service() {\n  sudo systemctl "$1" cardano-node.service\n}\n\ncardano-submit() {\n  sudo systemctl "$1" cardano-submit.service\n}\n')),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Source the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"source ${HOME}/.adaenv\n")),(0,o.kt)("p",null,"What we just did was create a couple of utility functions that make it easier to control the Cardano Node and the\nCardano Submit API."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cardano-service enable\ncardano-service start\ncardano-service stop\ncardano-service status\n")),(0,o.kt)("h2",{id:"syncing-to-the-blockchain"},"Syncing to the blockchain"),(0,o.kt)("p",null,"Starting the cardano-node will begin the process of syncing to the blockchain."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This is going to take a quite a while, the /db folder is about 80GB in size right now."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 git\n\u251c\u2500\u2500 .local\n\u2502\xa0\xa0 \u251c\u2500\u2500 bin\n\u251c\u2500\u2500 pi-pool\n\u2502\xa0\xa0 \u251c\u2500\u2500 db\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 immutable\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 ledger\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 volatile\n\u2502\xa0\xa0 \u251c\u2500\u2500 files\n\u2502\xa0\xa0 \u251c\u2500\u2500 logs\n\u2502\xa0\xa0 \u2514\u2500\u2500 scripts\n\u2514\u2500\u2500 tmp\n"))),(0,o.kt)("p",null,"Start the cardano-node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cardano-service enable\ncardano-service start\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You only need to synchronise your first node, after that you can use the Synology DSM's File Station to copy the\ndatabase directory.")),(0,o.kt)("h2",{id:"connecting-with-peers"},"Connecting with peers"),(0,o.kt)("p",null,"topologyUpdater is a ",(0,o.kt)("a",{href:"https://cardano-community.github.io/guild-operators/",target:"_blank"},"Guild Operators"),"\nhelper script that enables nodes to connect with other nodes."),(0,o.kt)("p",null,"Download the script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd $NODE_HOME/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/topologyUpdater.sh\n")),(0,o.kt)("p",null,"Open the ",(0,o.kt)("inlineCode",{parentName:"p"},"topologyUpdater.sh")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nano topologyUpdater.sh\n")),(0,o.kt)("p",null,"Lower the number of MAX_PEERS to 6 and add your custom peers (e.g., the IP address and port number of your Core Node):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'...\n\nMAX_PEERS=6\nCUSTOM_PEERS="192.168.102.3,3000"\n')),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("p",null,"Make the script executable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x topologyUpdater.sh\n")),(0,o.kt)("h3",{id:"create-a-cron-job"},"Create a cron job"),(0,o.kt)("p",null,"Create a cron job that will run the topologyUpdater script once an hour:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"crontab -e\n")),(0,o.kt)("p",null,"Add the following lines to the bottom of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"SHELL=/bin/bash\nPATH=/home/ada/.local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\n33 * * * * . $HOME/.adaenv; $HOME/pi-pool/scripts/topologyUpdater.sh\n")),(0,o.kt)("p",null,"Then save (Ctrl+O) and exit (Ctrl+X) nano."),(0,o.kt)("h2",{id:"monitoring"},"Monitoring"),(0,o.kt)("h3",{id:"gliveview"},"gLiveView"),(0,o.kt)("p",null,"gLiveView is a ",(0,o.kt)("a",{href:"https://cardano-community.github.io/guild-operators/",target:"_blank"},"Guild Operators"),"\nmonitoring tool that displays crucial node status information."),(0,o.kt)("p",null,"Download the tool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd $NODE_HOME/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh\n")),(0,o.kt)("p",null,"Add a line sourcing the ",(0,o.kt)("inlineCode",{parentName:"p"},".adaenv")," file to the top of the gLiveView ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," file and adjust some paths:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'sed -i env \\\n    -e "/#CNODEBIN/i. ${HOME}/.adaenv" \\\n    -e "s/\\#CNODE_HOME=\\"\\/opt\\/cardano\\/cnode\\"/CNODE_HOME=\\"\\${HOME}\\/pi-pool\\"/g" \\\n    -e "s/\\#CNODE_PORT=6000"/CNODE_PORT=\\"\'${NODE_PORT}\'\\""/g" \\\n    -e "s/\\#CONFIG=\\"\\${CNODE_HOME}\\/files\\/config.json\\"/CONFIG=\\"\\${NODE_FILES}\\/"\'${NODE_CONFIG}\'"-config.json\\"/g" \\\n    -e "s/\\#TOPOLOGY=\\"\\${CNODE_HOME}\\/files\\/topology.json\\"/TOPOLOGY=\\"\\${NODE_FILES}\\/"\'${NODE_CONFIG}\'"-topology.json\\"/g" \\\n    -e "s/\\#LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/g"\n')),(0,o.kt)("p",null,"Make the script executable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x gLiveView.sh\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A node must synchronise to (at least) epoch 208 (Shelley launch) before ",(0,o.kt)("strong",{parentName:"p"},"gLiveView")," can start tracking the synchronisation\nprocess.")),(0,o.kt)("p",null,"Run gLiveView:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd $NODE_HOME/scripts\n./gLiveView.sh\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("p",{align:"center"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"gLiveView",src:t(6125).Z,width:"444",height:"315"}))),(0,o.kt)("h3",{id:"prometheus"},"Prometheus"),(0,o.kt)("p",null,"Install ",(0,o.kt)("a",{href:"https://github.com/prometheus/node_exporter",target:"_blank"},"Prometheus Node Exporter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt install -y prometheus-node-exporter\n")),(0,o.kt)("p",null,"Run the following command to update the IP address for 'hasPrometheus' from ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," and enable\n'TraceBlockFetchDecisions' in the ",(0,o.kt)("inlineCode",{parentName:"p"},"${NODE_CONFIG}-config.json")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'cd $NODE_FILES\nsed -i ${NODE_CONFIG}-config.json \\\n    -e "s/127.0.0.1/0.0.0.0/g" \\\n    -e "s/TraceBlockFetchDecisions\\": false/TraceBlockFetchDecisions\\": true/g"\n\n')),(0,o.kt)("h3",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Haskell docs: ",(0,o.kt)("a",{parentName:"li",href:"https://downloads.haskell.org/ghc/latest/docs/users_guide/runtime_control.html"},"Runtime system (RTS) options")),(0,o.kt)("li",{parentName:"ul"},"Glasgow Haskell Compiler User's Guide: ",(0,o.kt)("a",{parentName:"li",href:"https://mpickering.github.io/ghc-docs/build-html/users_guide/sooner.html"},"Advice on: sooner, faster, smaller, thriftier")),(0,o.kt)("li",{parentName:"ul"},"Cardano forum - ANFA July 21: ",(0,o.kt)("a",{parentName:"li",href:"https://forum.cardano.org/t/solving-the-cardano-node-huge-memory-usage-done/67032"},"Solving the Cardano node huge memory usage problem")),(0,o.kt)("li",{parentName:"ul"},"Cardano forum - ANFA December 21: ",(0,o.kt)("a",{parentName:"li",href:"https://forum.cardano.org/t/solving-the-cardano-node-huge-memory-usage-done/67032/96"},"Solving the Cardano node huge memory usage problem")),(0,o.kt)("li",{parentName:"ul"},"GitHub input-output-hk daedalus: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/daedalus/issues/2734"},"Drastically reduce cardano-node memory usage by setting RTS params"))))}c.isMDXComponent=!0},6125:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/gliveview-a761c3651b6c3ab3f761fb3fce21700f.png"},7367:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/raspberry-pi-4-f5e5dcdf6a34223235f83261fa42d1e8.png"}}]);